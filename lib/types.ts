/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/cases/{caseId}/evaluate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations['evaluateCase'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['postChat'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/cases': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getCases'];
    put?: never;
    post: operations['postCase'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getUsers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['status'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/merchants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getMerchants'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Case: {
      /** @example 92534270 */
      caseId?: string;
      /** @example barvind88@gmail.com */
      solicitorId?: string;
      /** @example Fw: Address change request */
      subject?: string;
      /** @example 2024-08-15T14:41:01.042547100 */
      createdAt?: string;
      /** @example DQpJIHdvdWxkIGxpa2UgdG8gY2hhbmdlIHRoZSBhZGRyZXNzIG9uIHRoZSBmaWxlIHRvIGJlbG93LiBNZXJjaGFudElEOiAgMDAxNDcyOTk5MzM1ODk3NDk3MQ0KDQpOZXcgQWRkcmVzcw0KPT09PT09PT09PT09PT09PQ0KMTUwIFcgTWFpbiBTdCwgQXB0I3MiwgV2F1a2VzaGEuIFdJIC0gNTMxODYuDQoNClRoYW5rcw0KQXJ2aW5kIEINCg== */
      data?: string;
      /** @example ACKNOWLEDGED */
      status?: string;
      /** @example Lee Chambers */
      assignedTo?: string;
      workFlow?: components['schemas']['WorkFlow'];
    };
    WorkFlow: {
      name: string;
      works: components['schemas']['WorkItem'][];
    };
    WorkItem: {
      name: string;
      workResult: {
        name: string;
        extensions: {
          caseId?: string;
          status: string;
          validations?: string[];
          changeType?: string;
        };
        status: string;
        results: unknown[];
      };
      works?: components['schemas']['WorkItem'][];
    };
    UserPrompt: {
      /** @example What is the role of the user axbadri@gmail.com */
      message?: string;
    };
    AssistantPrompt: {
      message?: string;
    };
    User: {
      id?: string;
      name?: string;
      emailId?: string;
      /** @enum {string} */
      role?: 'ADMIN' | 'USER' | 'ANONYMOUS_USER';
      title?: string;
      companyName?: string;
      zipCode?: string;
    };
    Merchant: {
      id?: string;
      name?: string;
      /** @enum {string} */
      status?: 'OPEN' | 'HOLD' | 'REOPEN' | 'CLOSED' | 'NONE';
      zipCode?: string;
      reasonCode?: string;
      updatedBy?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  evaluateCase: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        caseId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Case'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Case'];
        };
      };
    };
  };
  postChat: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserPrompt'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AssistantPrompt'];
        };
      };
    };
  };
  getCases: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Case'];
        };
      };
    };
  };
  postCase: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Case'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Case'];
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query?: {
        emailId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  status: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  getMerchants: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Merchant'][];
        };
      };
    };
  };
}
